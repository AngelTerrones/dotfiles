" vim:foldmethod=marker:foldlevel=0
" Modeline and Notes {{{
"
" This is the personal .vimrc file of Angel Terrones.
"
" Copyright 2015 Angel Terrones
"
" }}}

" Launc configuration {{{
set t_Co=256
set nocompatible
set encoding=utf-8
set shell=/bin/zsh
set dir=~/.vim/swap//
set backupdir=~/.vim/backup//
set undodir=~/.vim/undo//
" }}}

" Plugin Manager (Pathogen) {{{
execute pathogen#infect()
call pathogen#helptags()
"}}}

" Syntaxis {{{
set modelines=1
filetype indent on
filetype plugin on
" }}}

" Ui layout {{{
set number
set showcmd
set cursorline
set wildmenu
set showmatch
set splitbelow
set splitright
"}}}

" Spaces and Tabs {{{
set tabstop=4
set expandtab
set softtabstop=4
set shiftwidth=4
set autoindent
set cindent
set smartindent
set smarttab
"}}}

" Wrap configuration {{{
set textwidth=0
set wrapmargin=0
set nowrap
" }}}

" Folding {{{
set foldenable
set foldlevelstart=0
set foldnestmax=10
set foldmethod=syntax
"}}}

" Search configuration {{{
set smartcase
set ignorecase
set incsearch
"}}}

" Misc {{{
set ruler
set undolevels=1000
set backspace=indent,eol,start
" }}}

" Remove whitespace {{{
match ErrorMsg '\s\+$'

function! TrimWhiteSpace()
    %s/\s\+$//e
endfunction

autocmd BufWritePre * :call TrimWhiteSpace()
" }}}

" Reload vimrc (auto) {{{
augroup myvimrc
    au!
    au BufWritePost $MYVIMRC so $MYVIMRC
augroup END
" }}}

" GVIM {{{
set guifont=Source\ Code\ Pro\ Medium\ 10
set guioptions-=m  "remove menu bar
set guioptions-=T  "remove toolbar
set guioptions-=r  "remove toolbar
set guioptions-=L  "remove left-hand scroll bar
set guiheadroom=0
" }}}

" C/C++ templates {{{
autocmd BufNewFile *.c  call UpdateHeader("cpp")
autocmd BufNewFile *.cpp call UpdateHeader("cpp")
autocmd BufNewFile *.h call UpdateHeader("hpp")
autocmd BufNewFile *.hpp call UpdateHeader("hpp")

function! UpdateHeader(extension)
    if a:extension == "cpp"
        0r ~/.vim/templates/skeleton.cpp
    else
        0r ~/.vim/templates/skeleton.hpp
    endif
    let l:filename = expand("%:t")
    let l:FILENAME = substitute(toupper(expand("%:t")), "\\.", "_", "g")
    let l:time = strftime("%Y/%m/%d %H:%M:%S")
    %s/<filename>/\=l:filename/g
    %s/<date>/\=l:time/g
    if a:extension == "hpp"
        %s/<fileguard>/\=l:FILENAME/g
    endif
    call cursor(1,1)
endfunction
" }}}

" Color {{{
"set background=light
let hour = strftime("%H")
if 6 <= hour && hour < 18
    set background=light
else
    set background=dark
endif
colorscheme solarized
syntax on
" }}}

" Airline {{{
set laststatus=2
set encoding=utf-8
let g:airline_powerline_fonts = 1
"let g:airline#extensions#tabline#enabled = 1
"let g:airline#extensions#tabline#fnamemod = ':t'
let g:airline_theme='solarized'
" }}}

" vim-move {{{
let g:move_key_modifier = 'S'
" }}}

" CtrlP {{{
let g:ctrlp_switch_buffer=0
let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
let g:ctrlp_custom_ignore = {
    \ 'dir': '\v[\/](\.(git|hg|svn)|\_site)$',
    \ 'file': '\v\.(exe|so|dll|class|png|jpg|jpeg|pdf|svg)$',
    \}
" use nearest .git folder as current directory
let g:ctrlp_working_path_mode = 'r'
"}}}

" NERDTree {{{
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif

hi NERDTreeDir ctermfg=White ctermbg=None

function! NERDTreeHighlightFile(extension, fg, bg, guifg, guibg)
    exec 'autocmd FileType nerdtree highlight ' . a:extension .' ctermbg='. a:bg .' ctermfg='. a:fg .' guibg='. a:guibg .' guifg='. a:guifg
    exec 'autocmd FileType nerdtree syn match ' . a:extension .' #^\s\+.*'. a:extension .'$#'
endfunction

call NERDTreeHighlightFile('py', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('md', 'blue', 'none', '#3366FF', '#151515')
call NERDTreeHighlightFile('config', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('conf', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('json', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('html', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('css', 'cyan', 'none', 'cyan', '#151515')
call NERDTreeHighlightFile('cpp', 'green', 'none', 'green', '#151515')
call NERDTreeHighlightFile('hpp', 'cyan', 'none', 'cyan', '#151515')
"call NERDTreeHighlightFile('c', 'green', 'none', 'green', '#151515')
call NERDTreeHighlightFile('h', 'cyan', 'none', 'cyan', '#151515')
call NERDTreeHighlightFile('cu', 'green', 'none', 'green', '#151515')
call NERDTreeHighlightFile('ui', 'green', 'none', 'green', '#151515')
call NERDTreeHighlightFile('js', 'Red', 'none', '#ffa500', '#151515')
call NERDTreeHighlightFile('m', 'red', 'none', '#ffa500', '#151515')
call NERDTreeHighlightFile('php', 'Magenta', 'none', '#ff00ff', '#151515')
" }}}

" Buffergator {{{
let g:buffergator_viewport_split_policy = 'R'
let g:buffergator_suppress_keymaps = 1
" }}}

" vim-explorer {{{
let g:VEConf_showHiddenFiles=0
" }}}

" Syntastic {{{
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_auto_jump = 0

" python
let g:syntastic_python_python_exec = '/usr/bin/python3'
let g:syntastic_python_checkers = ['pylint']

" C
let g:syntastic_c_check_header = 1
let g:syntastic_c_config_file = 'config'
let g:syntastic_c_compiler_options = ''

" Cpp
let g:syntastic_cpp_check_header = 1
let g:syntastic_cpp_compiler_options = "-std=c++11 -Wall -Wextra -Wpedantic -fPIC"
let g:syntastic_cpp_config_file = 'config'

" Cuda
let g:syntastic_cuda_check_header = 1
let g:syntastic_cuda_arch = "sm_30"
" }}}

" Neocomplete {{{
let g:acp_enableAtStartup = 0
let g:neocomplete#enable_at_startup = 1
let g:neocomplete#enable_smart_case = 1
let g:neocomplete#sources#syntax#min_keyword_length = 2
let g:neocomplete_lock_buffer_name_pattern = '\*ku\*'
" Define keyword
if !exists('g:neocomplete_keyword_patterns')
    let g:neocomplete_keyword_patterns = {}
endif
let g:neocomplete_keyword_patterns['default'] = '\h\w*'

" Enable onmicompletion
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=jedi#completions
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" Enable heavy omni completion.
"if !exists('g:neocomplete#sources#omni#input_patterns')
"    let g:neocomplete#sources#omni#input_patterns = {}
"endif
"
"let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
"let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'

if !exists('g:neocomplete#force_omni_input_patterns')
    let g:neocomplete#force_omni_input_patterns = {}
endif
let g:neocomplete#force_omni_input_patterns.python = '\%([^. \t]\.\|^\s*@\|^\s*from\s.\+import \|^\s*from \|^\s*import \)\w*'
let g:neocomplete#force_omni_input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)\w*'
let g:neocomplete#force_omni_input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\w*\|\h\w*::\w*'
let g:neocomplete#force_omni_input_patterns.objc = '\[\h\w*\s\h\?\|\h\w*\%(\.\|->\)'
let g:neocomplete#force_omni_input_patterns.objcpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'

"let g:neocomplete#sources#include#paths ={
"            \ 'cpp': '.,/usr/include,/opt/Qt5.4.2/5.4/gcc_64/include',
"            \ 'c': '.,/usr/include',
"            \}

"let g:neocomplete#sources#include#patterns = {
"  \ 'cpp':  '^\s*#\s*include',
"  \ 'c':    '^\s*#\s*include',
"  \ 'ruby': '^\s*require',
"  \ 'perl': '^\s*use',
"  \ }

" }}}

" clang_complete {{{
let g:clang_use_library      = 1
let g:clang_auto_select      = 0
let g:clang_complete_auto    = 0
let g:clang_complete_copen   = 1
let g:clang_complete_macros  = 1
let g:clang_complete_patters = 1
let g:clang_library_path = '/usr/lib/llvm-3.6/lib/libclang.so.1'
let g:clang_user_options = '|| exit 0'

autocmd CursorMovedI * if pumvisible() == 0|pclose|endif
autocmd InsertLeave * if pumvisible() == 0|pclose|endif
" }}}

" vim-jedi {{{
let g:jedi#completions_enable = 0
let g:jedi#auto_initialization = 0
let g:jedi#auto_vim_configuration =0
let g:jedi#force_py_version = 3
" }}}

" UltiSnips {{{
let g:UltiSnipsExpandTrigger="<C-K>"
let g:UltiSnipsJumpForwardTrigger="<c-f>"
let g:UltiSnipsJumpBackwardTrigger="<c-b>"
" }}}

" SimplyFold {{{
let g:SimpylFold_docstring_preview = 1
let g:SimpylFold_fold_docstring = 0
"}}}

" vim-multiple-cursors {{{
"let g:multi_cursor_use_default_mapping=0
"let g:multi_cursor_next_key='<C-n>'
"let g:multi_cursor_prev_key='<C-p>'
"let g:multi_cursor_skip_key='<C-x>'
"let g:multi_cursor_quit_key='<Esc>'

let g:multi_cursor_exit_from_insert_mode = 0

function! Multiple_cursors_before()
    if exists(':NeoCompleteLock')==2
       exe 'NeoCompleteLock'
    endif
endfunction

function! Multiple_cursors_after()
    if exists(':NeoCompleteUnlock')==2
        exe 'NeoCompleteUnlock'
    endif
endfunction
" }}}

" vim-simple-todo {{{
let g:simple_todo_map_keys = 0
" }}}

" shortcuts {{{
" leader
let mapleader="\<Space>"
nnoremap <leader>w :w<CR>
nnoremap <leader>s :mksession<CR>
nnoremap <leader>x :q<CR>
nnoremap <leader>q :q!<CR>
nnoremap <leader>l :noh<CR>

" CtrlP
nmap <leader>p :CtrlP<cr>
nmap <leader>pb :CtrlPBuffer<cr>
nmap <leader>pm :CtrlPMixed<cr>
nmap <leader>ps :CtrlPMRU<cr>
nmap <leader>pt :CtrlPTag<cr>

" fugitive
nnoremap <leader>ga :Git add %:p<CR><CR>
nnoremap <leader>gs :Gstatus<CR>
nnoremap <leader>gc :Gcommit -v -q<CR>
nnoremap <leader>gt :Gcommit -v -q %:p<CR>
nnoremap <leader>gd :Gdiff<CR>
nnoremap <leader>ge :Gedit<CR>
nnoremap <leader>gr :Gread<CR>
nnoremap <leader>gw :Gwrite<CR><CR>
nnoremap <leader>gl :silent! Glog<CR>:bot copen<CR>
nnoremap <leader>gp :Ggrep<Space>
nnoremap <leader>gm :Gmove<Space>
nnoremap <leader>gb :Git branch<Space>
nnoremap <leader>go :Git checkout<Space>
nnoremap <leader>gps :Dispatch! git push<CR>
nnoremap <leader>gpl :Dispatch! git pull<CR>

" buffergator
nmap <leader>jj :BuffergatorMruCyclePrev<cr>
nmap <leader>kk :BuffergatorMruCycleNext<cr>
nmap <leader>bl :BuffergatorOpen<cr>
nmap <leader>bn :enew<cr>
nmap <leader>bq :bn <BAR> bd #<cr>

" Tabs
nmap <leader>tn :tabedit<cr>
nmap <leader>tc :tabclose<cr>
nmap <leader>tl :tabs<cr>
nmap <leader>tf :tabn<cr>
nmap <leader>tp :tabp<cr>

" simple-todo
nmap <leader>ti <Plug>(simple-todo-new)
imap <leader>ti <Plug>(simple-todo-new)
nmap <leader>tI <Plug>(simple-todo-new-start-of-line)
imap <leader>tI <Plug>(simple-todo-new-start-of-line)
nmap <leader>tx <Plug>(simple-todo-mark-as-done)
imap <leader>tx <Plug>(simple-todo-mark-as-done)
nmap <leader>tX <Plug>(simple-todo-mark-as-undone)
imap <leader>tX <Plug>(simple-todo-mark-as-undone)

" Disable arrow keys
"inoremap  <Up>     <NOP>
"inoremap  <Down>   <NOP>
"inoremap  <Left>   <NOP>
"inoremap  <Right>  <NOP>
noremap   <Up>     <NOP>
noremap   <Down>   <NOP>
noremap   <Left>   <NOP>
noremap   <Right>  <NOP>

" normal shorcuts
inoremap jk <ESC>
inoremap kj <ESC>
nnoremap <tab> za

" Buffer/splits
nnoremap <C-j> <C-W><C-J>
nnoremap <C-k> <C-W><C-K>
nnoremap <C-l> <C-W><C-L>
nnoremap <C-h> <C-W><C-H>

" Ctrl-e: Go to end of line
inoremap <c-e> <esc>A

" Ctrl-w: Delete previous word, create undo point
inoremap <c-w> <c-g>u<c-w>

"Open shell
nmap <C-z> :shell<CR>

" NerdTree
map <F5> :NERDTreeToggle<CR>

" TagBar
nmap <F8> :TagbarToggle<CR>

"vim-explorer
map <F4>  :VE .<CR>

" vim-easy-align
vmap <Enter> <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)

" Syntastic
nmap <C-c> :lclose<CR>

" Neocomplete
    " <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
    return pumvisible() ? neocomplete#close_popup() : "\<CR>"
endfunction

    " <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
    "
inoremap <expr><C-n> neocomplete#start_manual_complete()
" }}}

